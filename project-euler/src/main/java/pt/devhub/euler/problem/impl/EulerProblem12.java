package pt.devhub.euler.problem.impl;

import pt.devhub.euler.problem.EulerProblemSolverUtil;
import pt.devhub.euler.problem.IEulerProblem;

/**
 * The sequence of triangle numbers is generated by adding the natural numbers.
 * So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first
 * ten terms would be:
 * 
 * 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 * 
 * Let us list the factors of the first seven triangle numbers:
 * 
 * 1: 1
 * 3: 1,3
 * 6: 1,2,3,6
 * 10: 1,2,5,10
 * 15: 1,3,5,15
 * 21: 1,3,7,21
 * 28: 1,2,4,7,14,28
 * 
 * We can see that 28 is the first triangle number to have over five divisors.
 * 
 * What is the value of the first triangle number to have over five hundred
 * divisors?
 */
public class EulerProblem12 implements IEulerProblem {

	/**
	 * {@inheritDoc}
	 */
	@Override
	public void solveProblem() {
		int triangleNumberIndex = 8;
		int triangleNumberValue = 28;
		int result = 0;

		while (true) {
			triangleNumberValue += triangleNumberIndex;

			if (triangleNumberValue % 2 == 0) {
				if (hasOver500Divisors(triangleNumberValue)) {
					result = triangleNumberValue;
					break;
				}
			}

			triangleNumberIndex++;
		}

		EulerProblemSolverUtil.printSolution(getClass(), result);
	}

	private boolean hasOver500Divisors(final int nthTriangleNumber) {
		int divisors = 0;

		for (int index = 1; index <= nthTriangleNumber; index++) {
			if (nthTriangleNumber % index == 0) {
				divisors++;
			}
		}

		return (divisors > 500);
	}
}
